<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>clash-for-windows-RCE</title>
      <link href="/2022/03/08/clash-for-windows-RCE/"/>
      <url>/2022/03/08/clash-for-windows-RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="Clash-for-windows-RCE"><a href="#Clash-for-windows-RCE" class="headerlink" title="Clash for windows RCE"></a>Clash for windows RCE</h1><h2 id="前因"><a href="#前因" class="headerlink" title="前因"></a>前因</h2><p>前段时间暴露出Clash for windows 一款使用electron编写的桌面代理软件出现RCE命令执行漏洞，初步了解是因为XSS构成的，因为对XSS构成RCE的漏洞比较感兴趣，所以想来试试看。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用前请提前用npm安装electron。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron -g</span><br></pre></td></tr></table></figure><p>由于是使用electron编写的，也是开源的软件，去作者的GitHub把源码下载了，进入resource资源夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asar extract app.asar ./ </span><br></pre></td></tr></table></figure><p>解压完成了，用VS Code 打开文件夹，下载插件 <strong>Prettier - Code formatter</strong> 可以把JS文件展开。</p><p>我们知道，使用electron编写的应用程序主要分为两个部分：主进程和渲染进程，应用里名字叫main.js和render.js。</p><p>主进程运行在node.js环境中，负责控制应用的生命周期，显示原生界面等。渲染进程主要功能是完善原生界面，相当于web前端。</p><p>如果出现xss问题，大概率是在渲染进程，因为涉及到和用户交互，所以我们直接从渲染进程入手。</p><p>首先在VS Code运行一下项目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"></span><br><span class="line">electron .</span><br></pre></td></tr></table></figure><p>暴露出RCE的漏洞是在配置文件中的name字段，我这边选了一个更简单复现的，在Profiles的搜索框中，直接输入XSS。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure><img src="/2022/03/08/clash-for-windows-RCE/image.jpg" class><p>可以成功弹窗。</p><p>如果没有问题，程序应该可以成功运行，点击窗口的View 选项，选择toggle developer Tools。</p><p>接下来和在web调试Js代码一模一样。</p><p>下断点一步一步调试后发现，作者在弹窗是使用了svg标签包裹了错误信息，并使用innerHTML方法将其返回，这便是造成xss的主要原因。故此猜测，在从配置文件中取出name字段时，也是使用了InnerHtml方法将其直接显示在主窗体中。</p><img src="/2022/03/08/clash-for-windows-RCE/2.png" class><p>但是由于electron在默认设置下，渲染进程是不允许使用NodeJS的原生API，不能使用require，也就不能RCE了。但是可能由于某些需要，在main.js的mainWindow中将nodeIntegration 设置为true，使得在渲染进程中得以使用原生api。</p><p>或者是由于其他的什么原因，没有根据<a href="https://www.electronjs.org/zh/docs/latest/tutorial/security">electron的安全推荐</a>进行编写代码，解压后的代码被重命名，太难看懂，没有仔细研究。</p><p>也去下载了最新的版本的修复，修复方案是弃用innerHtml方法，改用其他方式弹窗。相比前一个版本，innerHtml方法少了20+。</p><img src="/2022/03/08/clash-for-windows-RCE/3.png" class>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
